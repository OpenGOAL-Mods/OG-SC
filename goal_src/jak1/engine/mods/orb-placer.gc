(in-package goal)
;; (declare-file (debug))

;; controls whether the orb-placer process will run
(define *orb-placer-enabled?* #f)
;; controls whether level files are auto-loaded as levels are loaded in/out
(define *orb-placer-autoload-level?* (not *debug-segment*))
;; controls whether placer is actually active vs paused
(define *entity-placer-edit-mode?* #f)

(define *orb-placer-lvl-names* 
  (new 'static 'boxed-array :type string :length 16 :allocated-length 16
    "geyser"  ;; (training 0)
    "sandover"  ;; (village1 1)
    "beach"  ;; (beach 2)
    "jungle"  ;; (jungle 3)
    "misty"  ;; (misty 4)
    "fire-canyon"  ;; (firecanyon 5)
    "rock-village"  ;; (village2 6)
    "lpc"  ;; (sunken 7)
    "boggy"  ;; (swamp 8)
    "basin"  ;; (rolling 9)
    "mountain-pass"  ;; (ogre 10)
    "volcanic-crater"  ;; (village3 11)
    "snowy"  ;; (snow 12)
    "spider-cave"  ;; (cave 13)
    "lava-tube"  ;; (lavatube 14)
    "citadel"  ;; (citadel 15)
    )
  )

;; number of orbs orb-placer has placed
(define *orb-placer-count* (new 'static 'boxed-array :type int32 :length 16 :allocated-length 16
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    )
  )

;; for autload mode, tracks which levels we have objs loaded for
(define *orb-placer-lvl-loaded?* (new 'static 'boxed-array :type symbol :length 16 :allocated-length 16
    #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f
    )
  )

;; max number of orbs
(defconstant ORB_PLACER_MAX 2000)

;; index of level of currently selected orb for placing
(define *orb-placer-selected-level-idx* 0)
;; index of currently selected orb for placing
(define *orb-placer-selected-idx* -1)

;; array of handles to orbs that have been spawned by orb-placer
(define *orb-placer-orbs* 
  (new 'static 'boxed-array :type (array handle) :length 16 :allocated-length 16
    (new 'static 'boxed-array :type handle :length ORB_PLACER_MAX)
    (new 'static 'boxed-array :type handle :length ORB_PLACER_MAX)
    (new 'static 'boxed-array :type handle :length ORB_PLACER_MAX)
    (new 'static 'boxed-array :type handle :length ORB_PLACER_MAX)
    (new 'static 'boxed-array :type handle :length ORB_PLACER_MAX)
    (new 'static 'boxed-array :type handle :length ORB_PLACER_MAX)
    (new 'static 'boxed-array :type handle :length ORB_PLACER_MAX)
    (new 'static 'boxed-array :type handle :length ORB_PLACER_MAX)
    (new 'static 'boxed-array :type handle :length ORB_PLACER_MAX)
    (new 'static 'boxed-array :type handle :length ORB_PLACER_MAX)
    (new 'static 'boxed-array :type handle :length ORB_PLACER_MAX)
    (new 'static 'boxed-array :type handle :length ORB_PLACER_MAX)
    (new 'static 'boxed-array :type handle :length ORB_PLACER_MAX)
    (new 'static 'boxed-array :type handle :length ORB_PLACER_MAX)
    (new 'static 'boxed-array :type handle :length ORB_PLACER_MAX)
    (new 'static 'boxed-array :type handle :length ORB_PLACER_MAX)
    )
  )

(define *orb-placer-temp-strs*
  (new 'static
       'boxed-array
       :type
       string
       :length
       ORB_PLACER_MAX
        "obj-0000"	"obj-0001"	"obj-0002"	"obj-0003"	"obj-0004"	"obj-0005"	"obj-0006"	"obj-0007"	"obj-0008"	"obj-0009"
        "obj-0010"	"obj-0011"	"obj-0012"	"obj-0013"	"obj-0014"	"obj-0015"	"obj-0016"	"obj-0017"	"obj-0018"	"obj-0019"
        "obj-0020"	"obj-0021"	"obj-0022"	"obj-0023"	"obj-0024"	"obj-0025"	"obj-0026"	"obj-0027"	"obj-0028"	"obj-0029"
        "obj-0030"	"obj-0031"	"obj-0032"	"obj-0033"	"obj-0034"	"obj-0035"	"obj-0036"	"obj-0037"	"obj-0038"	"obj-0039"
        "obj-0040"	"obj-0041"	"obj-0042"	"obj-0043"	"obj-0044"	"obj-0045"	"obj-0046"	"obj-0047"	"obj-0048"	"obj-0049"
        "obj-0050"	"obj-0051"	"obj-0052"	"obj-0053"	"obj-0054"	"obj-0055"	"obj-0056"	"obj-0057"	"obj-0058"	"obj-0059"
        "obj-0060"	"obj-0061"	"obj-0062"	"obj-0063"	"obj-0064"	"obj-0065"	"obj-0066"	"obj-0067"	"obj-0068"	"obj-0069"
        "obj-0070"	"obj-0071"	"obj-0072"	"obj-0073"	"obj-0074"	"obj-0075"	"obj-0076"	"obj-0077"	"obj-0078"	"obj-0079"
        "obj-0080"	"obj-0081"	"obj-0082"	"obj-0083"	"obj-0084"	"obj-0085"	"obj-0086"	"obj-0087"	"obj-0088"	"obj-0089"
        "obj-0090"	"obj-0091"	"obj-0092"	"obj-0093"	"obj-0094"	"obj-0095"	"obj-0096"	"obj-0097"	"obj-0098"	"obj-0099"
        "obj-0100"	"obj-0101"	"obj-0102"	"obj-0103"	"obj-0104"	"obj-0105"	"obj-0106"	"obj-0107"	"obj-0108"	"obj-0109"
        "obj-0110"	"obj-0111"	"obj-0112"	"obj-0113"	"obj-0114"	"obj-0115"	"obj-0116"	"obj-0117"	"obj-0118"	"obj-0119"
        "obj-0120"	"obj-0121"	"obj-0122"	"obj-0123"	"obj-0124"	"obj-0125"	"obj-0126"	"obj-0127"	"obj-0128"	"obj-0129"
        "obj-0130"	"obj-0131"	"obj-0132"	"obj-0133"	"obj-0134"	"obj-0135"	"obj-0136"	"obj-0137"	"obj-0138"	"obj-0139"
        "obj-0140"	"obj-0141"	"obj-0142"	"obj-0143"	"obj-0144"	"obj-0145"	"obj-0146"	"obj-0147"	"obj-0148"	"obj-0149"
        "obj-0150"	"obj-0151"	"obj-0152"	"obj-0153"	"obj-0154"	"obj-0155"	"obj-0156"	"obj-0157"	"obj-0158"	"obj-0159"
        "obj-0160"	"obj-0161"	"obj-0162"	"obj-0163"	"obj-0164"	"obj-0165"	"obj-0166"	"obj-0167"	"obj-0168"	"obj-0169"
        "obj-0170"	"obj-0171"	"obj-0172"	"obj-0173"	"obj-0174"	"obj-0175"	"obj-0176"	"obj-0177"	"obj-0178"	"obj-0179"
        "obj-0180"	"obj-0181"	"obj-0182"	"obj-0183"	"obj-0184"	"obj-0185"	"obj-0186"	"obj-0187"	"obj-0188"	"obj-0189"
        "obj-0190"	"obj-0191"	"obj-0192"	"obj-0193"	"obj-0194"	"obj-0195"	"obj-0196"	"obj-0197"	"obj-0198"	"obj-0199"
        "obj-0200"	"obj-0201"	"obj-0202"	"obj-0203"	"obj-0204"	"obj-0205"	"obj-0206"	"obj-0207"	"obj-0208"	"obj-0209"
        "obj-0210"	"obj-0211"	"obj-0212"	"obj-0213"	"obj-0214"	"obj-0215"	"obj-0216"	"obj-0217"	"obj-0218"	"obj-0219"
        "obj-0220"	"obj-0221"	"obj-0222"	"obj-0223"	"obj-0224"	"obj-0225"	"obj-0226"	"obj-0227"	"obj-0228"	"obj-0229"
        "obj-0230"	"obj-0231"	"obj-0232"	"obj-0233"	"obj-0234"	"obj-0235"	"obj-0236"	"obj-0237"	"obj-0238"	"obj-0239"
        "obj-0240"	"obj-0241"	"obj-0242"	"obj-0243"	"obj-0244"	"obj-0245"	"obj-0246"	"obj-0247"	"obj-0248"	"obj-0249"
        "obj-0250"	"obj-0251"	"obj-0252"	"obj-0253"	"obj-0254"	"obj-0255"	"obj-0256"	"obj-0257"	"obj-0258"	"obj-0259"
        "obj-0260"	"obj-0261"	"obj-0262"	"obj-0263"	"obj-0264"	"obj-0265"	"obj-0266"	"obj-0267"	"obj-0268"	"obj-0269"
        "obj-0270"	"obj-0271"	"obj-0272"	"obj-0273"	"obj-0274"	"obj-0275"	"obj-0276"	"obj-0277"	"obj-0278"	"obj-0279"
        "obj-0280"	"obj-0281"	"obj-0282"	"obj-0283"	"obj-0284"	"obj-0285"	"obj-0286"	"obj-0287"	"obj-0288"	"obj-0289"
        "obj-0290"	"obj-0291"	"obj-0292"	"obj-0293"	"obj-0294"	"obj-0295"	"obj-0296"	"obj-0297"	"obj-0298"	"obj-0299"
        "obj-0300"	"obj-0301"	"obj-0302"	"obj-0303"	"obj-0304"	"obj-0305"	"obj-0306"	"obj-0307"	"obj-0308"	"obj-0309"
        "obj-0310"	"obj-0311"	"obj-0312"	"obj-0313"	"obj-0314"	"obj-0315"	"obj-0316"	"obj-0317"	"obj-0318"	"obj-0319"
        "obj-0320"	"obj-0321"	"obj-0322"	"obj-0323"	"obj-0324"	"obj-0325"	"obj-0326"	"obj-0327"	"obj-0328"	"obj-0329"
        "obj-0330"	"obj-0331"	"obj-0332"	"obj-0333"	"obj-0334"	"obj-0335"	"obj-0336"	"obj-0337"	"obj-0338"	"obj-0339"
        "obj-0340"	"obj-0341"	"obj-0342"	"obj-0343"	"obj-0344"	"obj-0345"	"obj-0346"	"obj-0347"	"obj-0348"	"obj-0349"
        "obj-0350"	"obj-0351"	"obj-0352"	"obj-0353"	"obj-0354"	"obj-0355"	"obj-0356"	"obj-0357"	"obj-0358"	"obj-0359"
        "obj-0360"	"obj-0361"	"obj-0362"	"obj-0363"	"obj-0364"	"obj-0365"	"obj-0366"	"obj-0367"	"obj-0368"	"obj-0369"
        "obj-0370"	"obj-0371"	"obj-0372"	"obj-0373"	"obj-0374"	"obj-0375"	"obj-0376"	"obj-0377"	"obj-0378"	"obj-0379"
        "obj-0380"	"obj-0381"	"obj-0382"	"obj-0383"	"obj-0384"	"obj-0385"	"obj-0386"	"obj-0387"	"obj-0388"	"obj-0389"
        "obj-0390"	"obj-0391"	"obj-0392"	"obj-0393"	"obj-0394"	"obj-0395"	"obj-0396"	"obj-0397"	"obj-0398"	"obj-0399"
        "obj-0400"	"obj-0401"	"obj-0402"	"obj-0403"	"obj-0404"	"obj-0405"	"obj-0406"	"obj-0407"	"obj-0408"	"obj-0409"
        "obj-0410"	"obj-0411"	"obj-0412"	"obj-0413"	"obj-0414"	"obj-0415"	"obj-0416"	"obj-0417"	"obj-0418"	"obj-0419"
        "obj-0420"	"obj-0421"	"obj-0422"	"obj-0423"	"obj-0424"	"obj-0425"	"obj-0426"	"obj-0427"	"obj-0428"	"obj-0429"
        "obj-0430"	"obj-0431"	"obj-0432"	"obj-0433"	"obj-0434"	"obj-0435"	"obj-0436"	"obj-0437"	"obj-0438"	"obj-0439"
        "obj-0440"	"obj-0441"	"obj-0442"	"obj-0443"	"obj-0444"	"obj-0445"	"obj-0446"	"obj-0447"	"obj-0448"	"obj-0449"
        "obj-0450"	"obj-0451"	"obj-0452"	"obj-0453"	"obj-0454"	"obj-0455"	"obj-0456"	"obj-0457"	"obj-0458"	"obj-0459"
        "obj-0460"	"obj-0461"	"obj-0462"	"obj-0463"	"obj-0464"	"obj-0465"	"obj-0466"	"obj-0467"	"obj-0468"	"obj-0469"
        "obj-0470"	"obj-0471"	"obj-0472"	"obj-0473"	"obj-0474"	"obj-0475"	"obj-0476"	"obj-0477"	"obj-0478"	"obj-0479"
        "obj-0480"	"obj-0481"	"obj-0482"	"obj-0483"	"obj-0484"	"obj-0485"	"obj-0486"	"obj-0487"	"obj-0488"	"obj-0489"
        "obj-0490"	"obj-0491"	"obj-0492"	"obj-0493"	"obj-0494"	"obj-0495"	"obj-0496"	"obj-0497"	"obj-0498"	"obj-0499"
        "obj-0500"	"obj-0501"	"obj-0502"	"obj-0503"	"obj-0504"	"obj-0505"	"obj-0506"	"obj-0507"	"obj-0508"	"obj-0509"
        "obj-0510"	"obj-0511"	"obj-0512"	"obj-0513"	"obj-0514"	"obj-0515"	"obj-0516"	"obj-0517"	"obj-0518"	"obj-0519"
        "obj-0520"	"obj-0521"	"obj-0522"	"obj-0523"	"obj-0524"	"obj-0525"	"obj-0526"	"obj-0527"	"obj-0528"	"obj-0529"
        "obj-0530"	"obj-0531"	"obj-0532"	"obj-0533"	"obj-0534"	"obj-0535"	"obj-0536"	"obj-0537"	"obj-0538"	"obj-0539"
        "obj-0540"	"obj-0541"	"obj-0542"	"obj-0543"	"obj-0544"	"obj-0545"	"obj-0546"	"obj-0547"	"obj-0548"	"obj-0549"
        "obj-0550"	"obj-0551"	"obj-0552"	"obj-0553"	"obj-0554"	"obj-0555"	"obj-0556"	"obj-0557"	"obj-0558"	"obj-0559"
        "obj-0560"	"obj-0561"	"obj-0562"	"obj-0563"	"obj-0564"	"obj-0565"	"obj-0566"	"obj-0567"	"obj-0568"	"obj-0569"
        "obj-0570"	"obj-0571"	"obj-0572"	"obj-0573"	"obj-0574"	"obj-0575"	"obj-0576"	"obj-0577"	"obj-0578"	"obj-0579"
        "obj-0580"	"obj-0581"	"obj-0582"	"obj-0583"	"obj-0584"	"obj-0585"	"obj-0586"	"obj-0587"	"obj-0588"	"obj-0589"
        "obj-0590"	"obj-0591"	"obj-0592"	"obj-0593"	"obj-0594"	"obj-0595"	"obj-0596"	"obj-0597"	"obj-0598"	"obj-0599"
        "obj-0600"	"obj-0601"	"obj-0602"	"obj-0603"	"obj-0604"	"obj-0605"	"obj-0606"	"obj-0607"	"obj-0608"	"obj-0609"
        "obj-0610"	"obj-0611"	"obj-0612"	"obj-0613"	"obj-0614"	"obj-0615"	"obj-0616"	"obj-0617"	"obj-0618"	"obj-0619"
        "obj-0620"	"obj-0621"	"obj-0622"	"obj-0623"	"obj-0624"	"obj-0625"	"obj-0626"	"obj-0627"	"obj-0628"	"obj-0629"
        "obj-0630"	"obj-0631"	"obj-0632"	"obj-0633"	"obj-0634"	"obj-0635"	"obj-0636"	"obj-0637"	"obj-0638"	"obj-0639"
        "obj-0640"	"obj-0641"	"obj-0642"	"obj-0643"	"obj-0644"	"obj-0645"	"obj-0646"	"obj-0647"	"obj-0648"	"obj-0649"
        "obj-0650"	"obj-0651"	"obj-0652"	"obj-0653"	"obj-0654"	"obj-0655"	"obj-0656"	"obj-0657"	"obj-0658"	"obj-0659"
        "obj-0660"	"obj-0661"	"obj-0662"	"obj-0663"	"obj-0664"	"obj-0665"	"obj-0666"	"obj-0667"	"obj-0668"	"obj-0669"
        "obj-0670"	"obj-0671"	"obj-0672"	"obj-0673"	"obj-0674"	"obj-0675"	"obj-0676"	"obj-0677"	"obj-0678"	"obj-0679"
        "obj-0680"	"obj-0681"	"obj-0682"	"obj-0683"	"obj-0684"	"obj-0685"	"obj-0686"	"obj-0687"	"obj-0688"	"obj-0689"
        "obj-0690"	"obj-0691"	"obj-0692"	"obj-0693"	"obj-0694"	"obj-0695"	"obj-0696"	"obj-0697"	"obj-0698"	"obj-0699"
        "obj-0700"	"obj-0701"	"obj-0702"	"obj-0703"	"obj-0704"	"obj-0705"	"obj-0706"	"obj-0707"	"obj-0708"	"obj-0709"
        "obj-0710"	"obj-0711"	"obj-0712"	"obj-0713"	"obj-0714"	"obj-0715"	"obj-0716"	"obj-0717"	"obj-0718"	"obj-0719"
        "obj-0720"	"obj-0721"	"obj-0722"	"obj-0723"	"obj-0724"	"obj-0725"	"obj-0726"	"obj-0727"	"obj-0728"	"obj-0729"
        "obj-0730"	"obj-0731"	"obj-0732"	"obj-0733"	"obj-0734"	"obj-0735"	"obj-0736"	"obj-0737"	"obj-0738"	"obj-0739"
        "obj-0740"	"obj-0741"	"obj-0742"	"obj-0743"	"obj-0744"	"obj-0745"	"obj-0746"	"obj-0747"	"obj-0748"	"obj-0749"
        "obj-0750"	"obj-0751"	"obj-0752"	"obj-0753"	"obj-0754"	"obj-0755"	"obj-0756"	"obj-0757"	"obj-0758"	"obj-0759"
        "obj-0760"	"obj-0761"	"obj-0762"	"obj-0763"	"obj-0764"	"obj-0765"	"obj-0766"	"obj-0767"	"obj-0768"	"obj-0769"
        "obj-0770"	"obj-0771"	"obj-0772"	"obj-0773"	"obj-0774"	"obj-0775"	"obj-0776"	"obj-0777"	"obj-0778"	"obj-0779"
        "obj-0780"	"obj-0781"	"obj-0782"	"obj-0783"	"obj-0784"	"obj-0785"	"obj-0786"	"obj-0787"	"obj-0788"	"obj-0789"
        "obj-0790"	"obj-0791"	"obj-0792"	"obj-0793"	"obj-0794"	"obj-0795"	"obj-0796"	"obj-0797"	"obj-0798"	"obj-0799"
        "obj-0800"	"obj-0801"	"obj-0802"	"obj-0803"	"obj-0804"	"obj-0805"	"obj-0806"	"obj-0807"	"obj-0808"	"obj-0809"
        "obj-0810"	"obj-0811"	"obj-0812"	"obj-0813"	"obj-0814"	"obj-0815"	"obj-0816"	"obj-0817"	"obj-0818"	"obj-0819"
        "obj-0820"	"obj-0821"	"obj-0822"	"obj-0823"	"obj-0824"	"obj-0825"	"obj-0826"	"obj-0827"	"obj-0828"	"obj-0829"
        "obj-0830"	"obj-0831"	"obj-0832"	"obj-0833"	"obj-0834"	"obj-0835"	"obj-0836"	"obj-0837"	"obj-0838"	"obj-0839"
        "obj-0840"	"obj-0841"	"obj-0842"	"obj-0843"	"obj-0844"	"obj-0845"	"obj-0846"	"obj-0847"	"obj-0848"	"obj-0849"
        "obj-0850"	"obj-0851"	"obj-0852"	"obj-0853"	"obj-0854"	"obj-0855"	"obj-0856"	"obj-0857"	"obj-0858"	"obj-0859"
        "obj-0860"	"obj-0861"	"obj-0862"	"obj-0863"	"obj-0864"	"obj-0865"	"obj-0866"	"obj-0867"	"obj-0868"	"obj-0869"
        "obj-0870"	"obj-0871"	"obj-0872"	"obj-0873"	"obj-0874"	"obj-0875"	"obj-0876"	"obj-0877"	"obj-0878"	"obj-0879"
        "obj-0880"	"obj-0881"	"obj-0882"	"obj-0883"	"obj-0884"	"obj-0885"	"obj-0886"	"obj-0887"	"obj-0888"	"obj-0889"
        "obj-0890"	"obj-0891"	"obj-0892"	"obj-0893"	"obj-0894"	"obj-0895"	"obj-0896"	"obj-0897"	"obj-0898"	"obj-0899"
        "obj-0900"	"obj-0901"	"obj-0902"	"obj-0903"	"obj-0904"	"obj-0905"	"obj-0906"	"obj-0907"	"obj-0908"	"obj-0909"
        "obj-0910"	"obj-0911"	"obj-0912"	"obj-0913"	"obj-0914"	"obj-0915"	"obj-0916"	"obj-0917"	"obj-0918"	"obj-0919"
        "obj-0920"	"obj-0921"	"obj-0922"	"obj-0923"	"obj-0924"	"obj-0925"	"obj-0926"	"obj-0927"	"obj-0928"	"obj-0929"
        "obj-0930"	"obj-0931"	"obj-0932"	"obj-0933"	"obj-0934"	"obj-0935"	"obj-0936"	"obj-0937"	"obj-0938"	"obj-0939"
        "obj-0940"	"obj-0941"	"obj-0942"	"obj-0943"	"obj-0944"	"obj-0945"	"obj-0946"	"obj-0947"	"obj-0948"	"obj-0949"
        "obj-0950"	"obj-0951"	"obj-0952"	"obj-0953"	"obj-0954"	"obj-0955"	"obj-0956"	"obj-0957"	"obj-0958"	"obj-0959"
        "obj-0960"	"obj-0961"	"obj-0962"	"obj-0963"	"obj-0964"	"obj-0965"	"obj-0966"	"obj-0967"	"obj-0968"	"obj-0969"
        "obj-0970"	"obj-0971"	"obj-0972"	"obj-0973"	"obj-0974"	"obj-0975"	"obj-0976"	"obj-0977"	"obj-0978"	"obj-0979"
        "obj-0980"	"obj-0981"	"obj-0982"	"obj-0983"	"obj-0984"	"obj-0985"	"obj-0986"	"obj-0987"	"obj-0988"	"obj-0989"
        "obj-0990"	"obj-0991"	"obj-0992"	"obj-0993"	"obj-0994"	"obj-0995"	"obj-0996"	"obj-0997"	"obj-0998"	"obj-0999"
        "obj-1000"	"obj-1001"	"obj-1002"	"obj-1003"	"obj-1004"	"obj-1005"	"obj-1006"	"obj-1007"	"obj-1008"	"obj-1009"
        "obj-1010"	"obj-1011"	"obj-1012"	"obj-1013"	"obj-1014"	"obj-1015"	"obj-1016"	"obj-1017"	"obj-1018"	"obj-1019"
        "obj-1020"	"obj-1021"	"obj-1022"	"obj-1023"	"obj-1024"	"obj-1025"	"obj-1026"	"obj-1027"	"obj-1028"	"obj-1029"
        "obj-1030"	"obj-1031"	"obj-1032"	"obj-1033"	"obj-1034"	"obj-1035"	"obj-1036"	"obj-1037"	"obj-1038"	"obj-1039"
        "obj-1040"	"obj-1041"	"obj-1042"	"obj-1043"	"obj-1044"	"obj-1045"	"obj-1046"	"obj-1047"	"obj-1048"	"obj-1049"
        "obj-1050"	"obj-1051"	"obj-1052"	"obj-1053"	"obj-1054"	"obj-1055"	"obj-1056"	"obj-1057"	"obj-1058"	"obj-1059"
        "obj-1060"	"obj-1061"	"obj-1062"	"obj-1063"	"obj-1064"	"obj-1065"	"obj-1066"	"obj-1067"	"obj-1068"	"obj-1069"
        "obj-1070"	"obj-1071"	"obj-1072"	"obj-1073"	"obj-1074"	"obj-1075"	"obj-1076"	"obj-1077"	"obj-1078"	"obj-1079"
        "obj-1080"	"obj-1081"	"obj-1082"	"obj-1083"	"obj-1084"	"obj-1085"	"obj-1086"	"obj-1087"	"obj-1088"	"obj-1089"
        "obj-1090"	"obj-1091"	"obj-1092"	"obj-1093"	"obj-1094"	"obj-1095"	"obj-1096"	"obj-1097"	"obj-1098"	"obj-1099"
        "obj-1100"	"obj-1101"	"obj-1102"	"obj-1103"	"obj-1104"	"obj-1105"	"obj-1106"	"obj-1107"	"obj-1108"	"obj-1109"
        "obj-1110"	"obj-1111"	"obj-1112"	"obj-1113"	"obj-1114"	"obj-1115"	"obj-1116"	"obj-1117"	"obj-1118"	"obj-1119"
        "obj-1120"	"obj-1121"	"obj-1122"	"obj-1123"	"obj-1124"	"obj-1125"	"obj-1126"	"obj-1127"	"obj-1128"	"obj-1129"
        "obj-1130"	"obj-1131"	"obj-1132"	"obj-1133"	"obj-1134"	"obj-1135"	"obj-1136"	"obj-1137"	"obj-1138"	"obj-1139"
        "obj-1140"	"obj-1141"	"obj-1142"	"obj-1143"	"obj-1144"	"obj-1145"	"obj-1146"	"obj-1147"	"obj-1148"	"obj-1149"
        "obj-1150"	"obj-1151"	"obj-1152"	"obj-1153"	"obj-1154"	"obj-1155"	"obj-1156"	"obj-1157"	"obj-1158"	"obj-1159"
        "obj-1160"	"obj-1161"	"obj-1162"	"obj-1163"	"obj-1164"	"obj-1165"	"obj-1166"	"obj-1167"	"obj-1168"	"obj-1169"
        "obj-1170"	"obj-1171"	"obj-1172"	"obj-1173"	"obj-1174"	"obj-1175"	"obj-1176"	"obj-1177"	"obj-1178"	"obj-1179"
        "obj-1180"	"obj-1181"	"obj-1182"	"obj-1183"	"obj-1184"	"obj-1185"	"obj-1186"	"obj-1187"	"obj-1188"	"obj-1189"
        "obj-1190"	"obj-1191"	"obj-1192"	"obj-1193"	"obj-1194"	"obj-1195"	"obj-1196"	"obj-1197"	"obj-1198"	"obj-1199"
        "obj-1200"	"obj-1201"	"obj-1202"	"obj-1203"	"obj-1204"	"obj-1205"	"obj-1206"	"obj-1207"	"obj-1208"	"obj-1209"
        "obj-1210"	"obj-1211"	"obj-1212"	"obj-1213"	"obj-1214"	"obj-1215"	"obj-1216"	"obj-1217"	"obj-1218"	"obj-1219"
        "obj-1220"	"obj-1221"	"obj-1222"	"obj-1223"	"obj-1224"	"obj-1225"	"obj-1226"	"obj-1227"	"obj-1228"	"obj-1229"
        "obj-1230"	"obj-1231"	"obj-1232"	"obj-1233"	"obj-1234"	"obj-1235"	"obj-1236"	"obj-1237"	"obj-1238"	"obj-1239"
        "obj-1240"	"obj-1241"	"obj-1242"	"obj-1243"	"obj-1244"	"obj-1245"	"obj-1246"	"obj-1247"	"obj-1248"	"obj-1249"
        "obj-1250"	"obj-1251"	"obj-1252"	"obj-1253"	"obj-1254"	"obj-1255"	"obj-1256"	"obj-1257"	"obj-1258"	"obj-1259"
        "obj-1260"	"obj-1261"	"obj-1262"	"obj-1263"	"obj-1264"	"obj-1265"	"obj-1266"	"obj-1267"	"obj-1268"	"obj-1269"
        "obj-1270"	"obj-1271"	"obj-1272"	"obj-1273"	"obj-1274"	"obj-1275"	"obj-1276"	"obj-1277"	"obj-1278"	"obj-1279"
        "obj-1280"	"obj-1281"	"obj-1282"	"obj-1283"	"obj-1284"	"obj-1285"	"obj-1286"	"obj-1287"	"obj-1288"	"obj-1289"
        "obj-1290"	"obj-1291"	"obj-1292"	"obj-1293"	"obj-1294"	"obj-1295"	"obj-1296"	"obj-1297"	"obj-1298"	"obj-1299"
        "obj-1300"	"obj-1301"	"obj-1302"	"obj-1303"	"obj-1304"	"obj-1305"	"obj-1306"	"obj-1307"	"obj-1308"	"obj-1309"
        "obj-1310"	"obj-1311"	"obj-1312"	"obj-1313"	"obj-1314"	"obj-1315"	"obj-1316"	"obj-1317"	"obj-1318"	"obj-1319"
        "obj-1320"	"obj-1321"	"obj-1322"	"obj-1323"	"obj-1324"	"obj-1325"	"obj-1326"	"obj-1327"	"obj-1328"	"obj-1329"
        "obj-1330"	"obj-1331"	"obj-1332"	"obj-1333"	"obj-1334"	"obj-1335"	"obj-1336"	"obj-1337"	"obj-1338"	"obj-1339"
        "obj-1340"	"obj-1341"	"obj-1342"	"obj-1343"	"obj-1344"	"obj-1345"	"obj-1346"	"obj-1347"	"obj-1348"	"obj-1349"
        "obj-1350"	"obj-1351"	"obj-1352"	"obj-1353"	"obj-1354"	"obj-1355"	"obj-1356"	"obj-1357"	"obj-1358"	"obj-1359"
        "obj-1360"	"obj-1361"	"obj-1362"	"obj-1363"	"obj-1364"	"obj-1365"	"obj-1366"	"obj-1367"	"obj-1368"	"obj-1369"
        "obj-1370"	"obj-1371"	"obj-1372"	"obj-1373"	"obj-1374"	"obj-1375"	"obj-1376"	"obj-1377"	"obj-1378"	"obj-1379"
        "obj-1380"	"obj-1381"	"obj-1382"	"obj-1383"	"obj-1384"	"obj-1385"	"obj-1386"	"obj-1387"	"obj-1388"	"obj-1389"
        "obj-1390"	"obj-1391"	"obj-1392"	"obj-1393"	"obj-1394"	"obj-1395"	"obj-1396"	"obj-1397"	"obj-1398"	"obj-1399"
        "obj-1400"	"obj-1401"	"obj-1402"	"obj-1403"	"obj-1404"	"obj-1405"	"obj-1406"	"obj-1407"	"obj-1408"	"obj-1409"
        "obj-1410"	"obj-1411"	"obj-1412"	"obj-1413"	"obj-1414"	"obj-1415"	"obj-1416"	"obj-1417"	"obj-1418"	"obj-1419"
        "obj-1420"	"obj-1421"	"obj-1422"	"obj-1423"	"obj-1424"	"obj-1425"	"obj-1426"	"obj-1427"	"obj-1428"	"obj-1429"
        "obj-1430"	"obj-1431"	"obj-1432"	"obj-1433"	"obj-1434"	"obj-1435"	"obj-1436"	"obj-1437"	"obj-1438"	"obj-1439"
        "obj-1440"	"obj-1441"	"obj-1442"	"obj-1443"	"obj-1444"	"obj-1445"	"obj-1446"	"obj-1447"	"obj-1448"	"obj-1449"
        "obj-1450"	"obj-1451"	"obj-1452"	"obj-1453"	"obj-1454"	"obj-1455"	"obj-1456"	"obj-1457"	"obj-1458"	"obj-1459"
        "obj-1460"	"obj-1461"	"obj-1462"	"obj-1463"	"obj-1464"	"obj-1465"	"obj-1466"	"obj-1467"	"obj-1468"	"obj-1469"
        "obj-1470"	"obj-1471"	"obj-1472"	"obj-1473"	"obj-1474"	"obj-1475"	"obj-1476"	"obj-1477"	"obj-1478"	"obj-1479"
        "obj-1480"	"obj-1481"	"obj-1482"	"obj-1483"	"obj-1484"	"obj-1485"	"obj-1486"	"obj-1487"	"obj-1488"	"obj-1489"
        "obj-1490"	"obj-1491"	"obj-1492"	"obj-1493"	"obj-1494"	"obj-1495"	"obj-1496"	"obj-1497"	"obj-1498"	"obj-1499"
        "obj-1500"	"obj-1501"	"obj-1502"	"obj-1503"	"obj-1504"	"obj-1505"	"obj-1506"	"obj-1507"	"obj-1508"	"obj-1509"
        "obj-1510"	"obj-1511"	"obj-1512"	"obj-1513"	"obj-1514"	"obj-1515"	"obj-1516"	"obj-1517"	"obj-1518"	"obj-1519"
        "obj-1520"	"obj-1521"	"obj-1522"	"obj-1523"	"obj-1524"	"obj-1525"	"obj-1526"	"obj-1527"	"obj-1528"	"obj-1529"
        "obj-1530"	"obj-1531"	"obj-1532"	"obj-1533"	"obj-1534"	"obj-1535"	"obj-1536"	"obj-1537"	"obj-1538"	"obj-1539"
        "obj-1540"	"obj-1541"	"obj-1542"	"obj-1543"	"obj-1544"	"obj-1545"	"obj-1546"	"obj-1547"	"obj-1548"	"obj-1549"
        "obj-1550"	"obj-1551"	"obj-1552"	"obj-1553"	"obj-1554"	"obj-1555"	"obj-1556"	"obj-1557"	"obj-1558"	"obj-1559"
        "obj-1560"	"obj-1561"	"obj-1562"	"obj-1563"	"obj-1564"	"obj-1565"	"obj-1566"	"obj-1567"	"obj-1568"	"obj-1569"
        "obj-1570"	"obj-1571"	"obj-1572"	"obj-1573"	"obj-1574"	"obj-1575"	"obj-1576"	"obj-1577"	"obj-1578"	"obj-1579"
        "obj-1580"	"obj-1581"	"obj-1582"	"obj-1583"	"obj-1584"	"obj-1585"	"obj-1586"	"obj-1587"	"obj-1588"	"obj-1589"
        "obj-1590"	"obj-1591"	"obj-1592"	"obj-1593"	"obj-1594"	"obj-1595"	"obj-1596"	"obj-1597"	"obj-1598"	"obj-1599"
        "obj-1600"	"obj-1601"	"obj-1602"	"obj-1603"	"obj-1604"	"obj-1605"	"obj-1606"	"obj-1607"	"obj-1608"	"obj-1609"
        "obj-1610"	"obj-1611"	"obj-1612"	"obj-1613"	"obj-1614"	"obj-1615"	"obj-1616"	"obj-1617"	"obj-1618"	"obj-1619"
        "obj-1620"	"obj-1621"	"obj-1622"	"obj-1623"	"obj-1624"	"obj-1625"	"obj-1626"	"obj-1627"	"obj-1628"	"obj-1629"
        "obj-1630"	"obj-1631"	"obj-1632"	"obj-1633"	"obj-1634"	"obj-1635"	"obj-1636"	"obj-1637"	"obj-1638"	"obj-1639"
        "obj-1640"	"obj-1641"	"obj-1642"	"obj-1643"	"obj-1644"	"obj-1645"	"obj-1646"	"obj-1647"	"obj-1648"	"obj-1649"
        "obj-1650"	"obj-1651"	"obj-1652"	"obj-1653"	"obj-1654"	"obj-1655"	"obj-1656"	"obj-1657"	"obj-1658"	"obj-1659"
        "obj-1660"	"obj-1661"	"obj-1662"	"obj-1663"	"obj-1664"	"obj-1665"	"obj-1666"	"obj-1667"	"obj-1668"	"obj-1669"
        "obj-1670"	"obj-1671"	"obj-1672"	"obj-1673"	"obj-1674"	"obj-1675"	"obj-1676"	"obj-1677"	"obj-1678"	"obj-1679"
        "obj-1680"	"obj-1681"	"obj-1682"	"obj-1683"	"obj-1684"	"obj-1685"	"obj-1686"	"obj-1687"	"obj-1688"	"obj-1689"
        "obj-1690"	"obj-1691"	"obj-1692"	"obj-1693"	"obj-1694"	"obj-1695"	"obj-1696"	"obj-1697"	"obj-1698"	"obj-1699"
        "obj-1700"	"obj-1701"	"obj-1702"	"obj-1703"	"obj-1704"	"obj-1705"	"obj-1706"	"obj-1707"	"obj-1708"	"obj-1709"
        "obj-1710"	"obj-1711"	"obj-1712"	"obj-1713"	"obj-1714"	"obj-1715"	"obj-1716"	"obj-1717"	"obj-1718"	"obj-1719"
        "obj-1720"	"obj-1721"	"obj-1722"	"obj-1723"	"obj-1724"	"obj-1725"	"obj-1726"	"obj-1727"	"obj-1728"	"obj-1729"
        "obj-1730"	"obj-1731"	"obj-1732"	"obj-1733"	"obj-1734"	"obj-1735"	"obj-1736"	"obj-1737"	"obj-1738"	"obj-1739"
        "obj-1740"	"obj-1741"	"obj-1742"	"obj-1743"	"obj-1744"	"obj-1745"	"obj-1746"	"obj-1747"	"obj-1748"	"obj-1749"
        "obj-1750"	"obj-1751"	"obj-1752"	"obj-1753"	"obj-1754"	"obj-1755"	"obj-1756"	"obj-1757"	"obj-1758"	"obj-1759"
        "obj-1760"	"obj-1761"	"obj-1762"	"obj-1763"	"obj-1764"	"obj-1765"	"obj-1766"	"obj-1767"	"obj-1768"	"obj-1769"
        "obj-1770"	"obj-1771"	"obj-1772"	"obj-1773"	"obj-1774"	"obj-1775"	"obj-1776"	"obj-1777"	"obj-1778"	"obj-1779"
        "obj-1780"	"obj-1781"	"obj-1782"	"obj-1783"	"obj-1784"	"obj-1785"	"obj-1786"	"obj-1787"	"obj-1788"	"obj-1789"
        "obj-1790"	"obj-1791"	"obj-1792"	"obj-1793"	"obj-1794"	"obj-1795"	"obj-1796"	"obj-1797"	"obj-1798"	"obj-1799"
        "obj-1800"	"obj-1801"	"obj-1802"	"obj-1803"	"obj-1804"	"obj-1805"	"obj-1806"	"obj-1807"	"obj-1808"	"obj-1809"
        "obj-1810"	"obj-1811"	"obj-1812"	"obj-1813"	"obj-1814"	"obj-1815"	"obj-1816"	"obj-1817"	"obj-1818"	"obj-1819"
        "obj-1820"	"obj-1821"	"obj-1822"	"obj-1823"	"obj-1824"	"obj-1825"	"obj-1826"	"obj-1827"	"obj-1828"	"obj-1829"
        "obj-1830"	"obj-1831"	"obj-1832"	"obj-1833"	"obj-1834"	"obj-1835"	"obj-1836"	"obj-1837"	"obj-1838"	"obj-1839"
        "obj-1840"	"obj-1841"	"obj-1842"	"obj-1843"	"obj-1844"	"obj-1845"	"obj-1846"	"obj-1847"	"obj-1848"	"obj-1849"
        "obj-1850"	"obj-1851"	"obj-1852"	"obj-1853"	"obj-1854"	"obj-1855"	"obj-1856"	"obj-1857"	"obj-1858"	"obj-1859"
        "obj-1860"	"obj-1861"	"obj-1862"	"obj-1863"	"obj-1864"	"obj-1865"	"obj-1866"	"obj-1867"	"obj-1868"	"obj-1869"
        "obj-1870"	"obj-1871"	"obj-1872"	"obj-1873"	"obj-1874"	"obj-1875"	"obj-1876"	"obj-1877"	"obj-1878"	"obj-1879"
        "obj-1880"	"obj-1881"	"obj-1882"	"obj-1883"	"obj-1884"	"obj-1885"	"obj-1886"	"obj-1887"	"obj-1888"	"obj-1889"
        "obj-1890"	"obj-1891"	"obj-1892"	"obj-1893"	"obj-1894"	"obj-1895"	"obj-1896"	"obj-1897"	"obj-1898"	"obj-1899"
        "obj-1900"	"obj-1901"	"obj-1902"	"obj-1903"	"obj-1904"	"obj-1905"	"obj-1906"	"obj-1907"	"obj-1908"	"obj-1909"
        "obj-1910"	"obj-1911"	"obj-1912"	"obj-1913"	"obj-1914"	"obj-1915"	"obj-1916"	"obj-1917"	"obj-1918"	"obj-1919"
        "obj-1920"	"obj-1921"	"obj-1922"	"obj-1923"	"obj-1924"	"obj-1925"	"obj-1926"	"obj-1927"	"obj-1928"	"obj-1929"
        "obj-1930"	"obj-1931"	"obj-1932"	"obj-1933"	"obj-1934"	"obj-1935"	"obj-1936"	"obj-1937"	"obj-1938"	"obj-1939"
        "obj-1940"	"obj-1941"	"obj-1942"	"obj-1943"	"obj-1944"	"obj-1945"	"obj-1946"	"obj-1947"	"obj-1948"	"obj-1949"
        "obj-1950"	"obj-1951"	"obj-1952"	"obj-1953"	"obj-1954"	"obj-1955"	"obj-1956"	"obj-1957"	"obj-1958"	"obj-1959"
        "obj-1960"	"obj-1961"	"obj-1962"	"obj-1963"	"obj-1964"	"obj-1965"	"obj-1966"	"obj-1967"	"obj-1968"	"obj-1969"
        "obj-1970"	"obj-1971"	"obj-1972"	"obj-1973"	"obj-1974"	"obj-1975"	"obj-1976"	"obj-1977"	"obj-1978"	"obj-1979"
        "obj-1980"	"obj-1981"	"obj-1982"	"obj-1983"	"obj-1984"	"obj-1985"	"obj-1986"	"obj-1987"	"obj-1988"	"obj-1989"
        "obj-1990"	"obj-1991"	"obj-1992"	"obj-1993"	"obj-1994"	"obj-1995"	"obj-1996"	"obj-1997"	"obj-1998"	"obj-1999"
       ))

;; global for this so we can repopulate it as needed
(when *debug-segment*
  (define *orb-placer-select-menu* (the-as debug-menu #f))

  (defun dm-orb-placer-select-func ((idx int) (msg debug-menu-msg))
    (when (= msg (debug-menu-msg press))
      (cond
        ((= *orb-placer-selected-idx* idx)
        ;; deselect
        (set! *orb-placer-selected-idx* -1)
        (set! *orb-placer-enabled?* #f)
        (false! *entity-placer-edit-mode?*))
        (else
        ;; select
        (set! *orb-placer-selected-idx* idx)
        (set! *orb-placer-enabled?* #t)
        (true! *entity-placer-edit-mode?*))))
    (= *orb-placer-selected-idx* idx))
  )

(defun orb-placer-highlight ((orb process-drawable) (highlight? symbol))
  (return 0)
  (cond
    (highlight?
     (set-vector! (-> orb draw color-mult) 0.8 0.8 0.0 1.0)
     (set-vector! (-> orb draw color-emissive) 0.0 1.0 0.2 1.0))
    (else (set-vector! (-> orb draw color-mult) 0.8 0.8 0.8 1.0) (set-vector! (-> orb draw color-emissive) 0.2 0.2 0.2 1.0)))
  (none))

(defun orb-placer-list-maintenance ((update-debug-list? symbol))
  (when *debug-segment*
    (when update-debug-list?
      (debug-menu-remove-all-items *orb-placer-select-menu*))
    (when *orb-placer-enabled?* ;; only show names in edit mode
      (dotimes (i (-> *orb-placer-count* *orb-placer-selected-level-idx*))
        (let ((orb-handle (-> *orb-placer-orbs* *orb-placer-selected-level-idx* i))
              (is-selected? (and *orb-placer-enabled?* (= i *orb-placer-selected-idx*))))
          (when (and (nonzero? orb-handle) (handle->process orb-handle))
            (let ((orb-proc (the process-drawable (handle->process orb-handle))))
              (when (and orb-proc (!= (-> orb-proc next-state name) 'dead-state) (!= (-> orb-proc next-state name) 'hud-collecting))
                ;; ensure correct highlighting
                ;; (orb-placer-highlight orb-proc is-selected?)
                ;; draw z-debug text
                (add-debug-text-3d #t
                                  (bucket-id debug-no-zbuf)
                                  (-> *orb-placer-temp-strs* i)
                                  (-> orb-proc root trans) ;; (-> orb-proc base)
                                  (if is-selected? 
                                    (if *entity-placer-edit-mode?* (font-color green) (font-color red))
                                    (font-color white))
                                  (new 'static 'vector2h :y 16))
                (when update-debug-list?
                  ;; append to debug menu list
                  (let ((orb-menu-item (new-dm-flag (-> *orb-placer-temp-strs* i) i dm-orb-placer-select-func)))
                    (debug-menu-append-item *orb-placer-select-menu* orb-menu-item)
                    (when is-selected?
                      (set! (-> *orb-placer-select-menu* selected-item) orb-menu-item))))))))))
    (when update-debug-list?
      (set! (-> *orb-placer-select-menu* items) (sort (-> *orb-placer-select-menu* items) debug-menu-node<?)))
    )
  (none))

(defun orb-placer-add ()
  (when (< (-> *orb-placer-count* *orb-placer-selected-level-idx*) ORB_PLACER_MAX)
    (let ((vec (new 'stack-no-clear 'vector))
          (camera-quat (new-stack-quaternion0))
          (camera-z-vector (new-stack-vector0)))
      ;; figure out spawn position
      (cond
        (*target*
         ;; jak exists, use his position
         (vector-copy! vec (-> *target* root trans))
         (+! (-> vec y) (meters 2.0)) ;; dont spawn in ground
         )
        (else
         ;; use camera position
         (vector-copy! vec (-> *math-camera* trans))))
      ;; convert the camera angle from a matrix to a quaternion (???)
      (matrix->quaternion camera-quat (-> *camera-combiner* inv-camera-rot))
      ;; convert the quaternion to a vector representing rotation around z axis (isnt it the y axis in GOAL tho?)
      (vector-z-quaternion! camera-z-vector camera-quat)
      ;; shift orb's position with camera angle, by 3m
      (vector+! vec vec (vector-normalize! camera-z-vector (meters 3.0)))
      ;; spawn and update orb-placer data
      (let ((orb-handle (spawn-obj 'ventblue vec 0.0 0.0)))
        (when (nonzero? orb-handle)
          (set! (-> *orb-placer-orbs* *orb-placer-selected-level-idx* (-> *orb-placer-count* *orb-placer-selected-level-idx*)) orb-handle)
          (set! *orb-placer-selected-idx* (-> *orb-placer-count* *orb-placer-selected-level-idx*))
          (true! *orb-placer-enabled?*)
          (true! *entity-placer-edit-mode?*)
          ;; (orb-placer-highlight (the process-drawable (handle->process orb-handle)) #t)
          (+! (-> *orb-placer-count* *orb-placer-selected-level-idx*) 1)
          (orb-placer-list-maintenance #t)))))
  (none))

(defun orb-placer-get-spawn-orb-req ((proc process-drawable))
  (case (-> proc type symbol) :comp name=
    (('eco-green 'eco-blue 'eco-red 'eco-yellow) (-> (the eco proc) spawn-orb-req))
    (('ventgreen 'ventblue 'ventred 'ventyellow) (-> (the vent proc) spawn-orb-req))
    (else 0.0)
    )
  )

(defun orb-placer-get-despawn-orb-req ((proc process-drawable))
  (case (-> proc type symbol) :comp name=
    (('eco-green 'eco-blue 'eco-red 'eco-yellow) (-> (the eco proc) despawn-orb-req))
    (('ventgreen 'ventblue 'ventred 'ventyellow) (-> (the vent proc) despawn-orb-req))
    (else 0.0)
    )
  )

(defun orb-placer-dupe ()
  (when (and (< (-> *orb-placer-count* *orb-placer-selected-level-idx*) ORB_PLACER_MAX)
             (>= *orb-placer-selected-idx* 0) (nonzero? (-> *orb-placer-orbs* *orb-placer-selected-level-idx* *orb-placer-selected-idx*)))
    (let ((orb-handle (-> *orb-placer-orbs* *orb-placer-selected-level-idx* *orb-placer-selected-idx*)))
      (when (and (nonzero? orb-handle) (handle->process orb-handle))
        (let* ((obj (the process-drawable (handle->process orb-handle)))
               (obj2-handle (spawn-obj (-> obj type symbol) (-> obj root trans) (orb-placer-get-spawn-orb-req obj) (orb-placer-get-despawn-orb-req obj))))
          (when (nonzero? obj2-handle)
            (set! (-> *orb-placer-orbs* *orb-placer-selected-level-idx* (-> *orb-placer-count* *orb-placer-selected-level-idx*)) obj2-handle)
            (set! *orb-placer-selected-idx* (-> *orb-placer-count* *orb-placer-selected-level-idx*))
            (true! *orb-placer-enabled?*)
            (true! *entity-placer-edit-mode?*)
            ;; (orb-placer-highlight (the process-drawable (handle->process orb-handle)) #t)
            (+! (-> *orb-placer-count* *orb-placer-selected-level-idx*) 1)
            (orb-placer-list-maintenance #t))))))
  (none))

(defun orb-placer-print-selected ()
  (when (and (>= *orb-placer-selected-idx* 0) (nonzero? (-> *orb-placer-orbs* *orb-placer-selected-level-idx* *orb-placer-selected-idx*)))
    (let ((orb (the process-drawable (handle->process (-> *orb-placer-orbs* *orb-placer-selected-level-idx* *orb-placer-selected-idx*)))))
      (when orb
        (format 0 " ~m, ~m, ~m~%" (-> orb root trans x) (-> orb root trans y) (-> orb root trans z)))))
  (none))

(defun add-orb-req ((proc process-drawable) (amount float))
  (case (-> proc type symbol) :comp name=
    (('eco-green 'eco-blue 'eco-red 'eco-yellow)
      (+! (-> (the eco proc) spawn-orb-req) amount)
      (when (< (-> (the eco proc) spawn-orb-req) 0.0)
        (set! (-> (the eco proc) spawn-orb-req) 0.0)) ;; clamp to 0
      (when (> (-> (the eco proc) spawn-orb-req) 2000.0)
        (set! (-> (the eco proc) spawn-orb-req) 2000.0)) ;; clamp to 2000)
      )
    (('ventgreen 'ventblue 'ventred 'ventyellow)
      (+! (-> (the vent proc) spawn-orb-req) amount)
      (when (< (-> (the vent proc) spawn-orb-req) 0.0)
        (set! (-> (the vent proc) spawn-orb-req) 0.0)) ;; clamp to 0
      (when (> (-> (the vent proc) spawn-orb-req) 2000.0)
        (set! (-> (the vent proc) spawn-orb-req) 2000.0)) ;; clamp to 2000)
      )
    (else 0.0)
    )
  (none)
  )

(defun orb-placer-print-all ()
  (dotimes (j 16)
    (format 0 "|------------~S start------------|~%" (-> *orb-placer-lvl-names* j))
    (dotimes (i (-> *orb-placer-count* j))
      (let ((orb-handle (-> *orb-placer-orbs* *orb-placer-selected-level-idx* i)))
        (when (and (nonzero? orb-handle) (handle->process orb-handle))
          (let ((orb (the process-drawable (handle->process orb-handle))))
            (format 0 " ~A (~D) ~m, ~m, ~m (~D)~%" (-> orb type symbol) (orb-placer-get-spawn-orb-req orb) (orb-placer-get-despawn-orb-req orb) (-> orb root trans x) (-> orb root trans y) (-> orb root trans z))))))
    (format 0 "|-------------~S end-------------|~%" (-> *orb-placer-lvl-names* j))
    )
  (none))

(defun orb-placer-get-next-type ((typename symbol))
  (case typename :comp name=
    (('eco-green) 'eco-blue)
    (('eco-blue) 'eco-red)
    (('eco-red) 'eco-yellow)
    (('eco-yellow) 'ventgreen)
    (('ventgreen) 'ventblue)
    (('ventblue) 'ventred)
    (('ventred) 'ventyellow)
    (('ventyellow) 'eco-green)
    )
  )

(defun orb-placer-toggle-type ()
  (when (and (>= *orb-placer-selected-idx* 0) (nonzero? (-> *orb-placer-orbs* *orb-placer-selected-level-idx* *orb-placer-selected-idx*)))
    (let* ((obj (the process-drawable (handle->process (-> *orb-placer-orbs* *orb-placer-selected-level-idx* *orb-placer-selected-idx*))))
           (next-type (orb-placer-get-next-type (-> obj type symbol)))
           (obj2-handle (spawn-obj next-type (-> obj root trans) (orb-placer-get-spawn-orb-req obj) (orb-placer-get-despawn-orb-req obj))))
      (when (nonzero? obj2-handle)
        (deactivate obj)
        (set! (-> *orb-placer-orbs* *orb-placer-selected-level-idx* *orb-placer-selected-idx*) obj2-handle)
        ;; (orb-placer-highlight (handle-process obj2) #t)
        ;; (orb-placer-list-maintenance #t)
        )
      )
    )
  )

;; called from run-every-frame to ensure orb-placer is spawned/killed
(define *orb-offset-tmp-vec* (new 'global 'vector))
(define *orb-placer-hud-str* (new 'global 'string 1024 (the string #f)))
(define *square-hold-time* (the time-frame #f))
(define *circle-hold-time* (the time-frame #f))
(define-extern orb-placer-autoload-maintenance (function none))
(defun orb-placer-maintenance ()
  (when *orb-placer-autoload-level?*
    (orb-placer-autoload-maintenance)
    )
  (when *debug-segment*
    (orb-placer-list-maintenance #f)
    (when (and (not *progress-process*) *orb-placer-enabled?*)
      ;; handle edit mode toggle
      (when (cpad-pressed? 0 triangle)
        (not! *entity-placer-edit-mode?*))

      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id subtitle))
        (format (clear *orb-placer-hud-str*) "Object Placer Mode~%")
        (format *orb-placer-hud-str* "~1LEditing Level: ~S~%" (-> *orb-placer-lvl-names* *orb-placer-selected-level-idx*))
        (cond
          (*entity-placer-edit-mode?* 
            (format *orb-placer-hud-str* "~2L(TRIANGLE) ~6LACTIVE~%"))
          (else (format *orb-placer-hud-str* "~2L(TRIANGLE) PAUSED~%"))
          )
        (when (> *orb-placer-selected-idx* -1)
          (let ((orb (the process-drawable (handle->process (-> *orb-placer-orbs* *orb-placer-selected-level-idx* *orb-placer-selected-idx*)))))
            (when orb
              (format *orb-placer-hud-str* "~2L(SQUARE- / CIRCLE+) ~0LSpawn Orb Count: ~D~%" (the int (orb-placer-get-spawn-orb-req orb)))
              (when (nonzero? (orb-placer-get-despawn-orb-req orb))
                (format *orb-placer-hud-str* "~0LDespawn Orb Count: ~D~%" (the int (orb-placer-get-despawn-orb-req orb))))
              (format *orb-placer-hud-str* "~2L(X) ~0LType: ~S~%" (-> orb type symbol))
              )
            )
          )
        (draw-string-xy *orb-placer-hud-str* buf 508 2 (font-color red) (font-flags right shadow kerning))
        )
      )
    (cond
      ((process-by-name "orb-placer" *active-pool*)
       ;; orb-placer exists
       ;; if its not enabled, kill it
       (when (not (and *debug-segment* *orb-placer-enabled?*))
         (kill-by-name "orb-placer" *active-pool*)
         ;; make sure target is ungrabbed
         (when (and *target* (= (-> *target* next-state name) 'target-grab))
           (send-event *target* 'end-mode))
         ;; release freecam if no target
         (when (and (not *target*) (not (send-event *camera* 'query-state cam-free-floating)))
           (send-event *camera* 'change-state cam-free-floating 0))))
      (else
       ;; orb-placer doesn't exist
       ;; if its enabled, spawn it
       (when (and *debug-segment* *orb-placer-enabled?*)
         ;; process-spawn-function, spawns a process that runs the function you give it
         (process-spawn-function process
           :name "orb-placer"
           (lambda :behavior process ()
             (stack-size-set! (-> self top-thread) 512)
             ;; Code before the loop runs once on process spawn
             (let ((pad (-> *cpad-list* cpads 0))
                   (vec *orb-offset-tmp-vec*))
               (loop
                 ;; Loop runs once per frame while process is active
                 (cond
                    ((not *entity-placer-edit-mode?*) ;; disabled
                      ;; make sure target is released
                      (when (and *target* (= (-> *target* next-state name) 'target-grab))
                        (send-event *target* 'end-mode))
                      ;; unlock freecam if no target
                      (when (and (not *target*) (not (send-event *camera* 'query-state cam-free-floating)))
                        (send-event *camera* 'change-state cam-free-floating 0))
                      ;; clear these
                      (set! *square-hold-time* (the time-frame #f)) ;; make sure square not considered held
                      (set! *circle-hold-time* (the time-frame #f)) ;; make sure circle not considered held
                      )
                    (else ;; active
                      ;; make sure target is grabbed
                      (when (and *target* (!= (-> *target* next-state name) 'target-grab))
                        (send-event *target* 'change-mode 'grab))
                      ;; lock freecam if no target
                      (when (and (not *target*) (not (send-event *camera* 'query-state cam-fixed)))
                        (send-event *camera* 'change-state cam-fixed 0))
                      ;; if we have an orb selected and the handle is nonzero...
                      (cond
                        ((and (>= *orb-placer-selected-idx* 0) 
                              (nonzero? (-> *orb-placer-orbs* *orb-placer-selected-level-idx* *orb-placer-selected-idx*)) 
                              (handle->process (-> *orb-placer-orbs* *orb-placer-selected-level-idx* *orb-placer-selected-idx*)))
                          (let ((orb (the process-drawable (handle->process (-> *orb-placer-orbs* *orb-placer-selected-level-idx* *orb-placer-selected-idx*))))
                                (moved? #f))
                            (when orb
                              ;; highlight it
                              ;; (orb-placer-highlight orb #t)
                              ;; respond to controller input
                              ;; X/Z based on camera
                              (when (nonzero? (-> pad stick0-speed))
                                (set! (-> vec x) (sin (-> pad stick0-dir)))
                                (set! (-> vec y) 0.0)
                                (set! (-> vec z) (cos (-> pad stick0-dir)))
                                (set! (-> vec w) 0.0)
                                ;; camera magic
                                (vector-matrix*! vec vec (matrix-local->world #t #f))
                                (vector-flatten! vec vec (-> *camera* local-down))
                                (vector-float*! vec vec (* (-> pad stick0-speed) 512.0)) ;; TODO scale?
                                ;; actually move orb
                                (vector+! (-> orb root trans) (-> orb root trans) vec)
                                ;;  (vector+! (-> orb base) (-> orb base) vec))
                                (true! moved?)
                                )
                              ;; change type
                              (when (cpad-pressed? 0 x)
                                (orb-placer-toggle-type))
                              (cond
                                ((cpad-pressed? 0 square)
                                (add-orb-req orb -1.0)
                                (set! *square-hold-time* (the time-frame #f)) ;; make sure square not considered held
                                (set! *circle-hold-time* (the time-frame #f)) ;; make sure circle not considered held
                                )
                                ((cpad-pressed? 0 circle)
                                (add-orb-req orb 1.0)
                                (set! *square-hold-time* (the time-frame #f)) ;; make sure square not considered held
                                (set! *circle-hold-time* (the time-frame #f)) ;; make sure circle not considered held
                                )
                                ((cpad-hold? 0 square)
                                (set! *circle-hold-time* (the time-frame #f)) ;; square held, make sure circle not considered held
                                (when (not *square-hold-time*) (set-time! *square-hold-time*)) ;; if we werent already holding square, set the hold time
                                (when (zero? (mod (current-time) 50))
                                  (add-orb-req orb (the float (the int (* (the float (* (- (current-time) *square-hold-time*) (- (current-time) *square-hold-time*))) -0.0002)))) ;; subtract O(square-hold-time^2) ?
                                  ))
                                ((cpad-hold? 0 circle)
                                (set! *square-hold-time* (the time-frame #f)) ;; circle held, make sure square not considered held
                                (when (not *circle-hold-time*) (set-time! *circle-hold-time*)) ;; if we werent already holding circle, set the hold time
                                (when (zero? (mod (current-time) 50))
                                  (add-orb-req orb (the float (the int (* (the float (* (- (current-time) *circle-hold-time*) (- (current-time) *circle-hold-time*))) 0.0002)))) ;; add O(circle-hold-time^2) ?
                                  ))
                                (else
                                (set! *square-hold-time* (the time-frame #f)) ;; make sure square not considered held
                                (set! *circle-hold-time* (the time-frame #f)) ;; make sure circle not considered held                              
                                )
                                )
                              (cond
                                ;; fine tune/axis-aligned X/Z
                                ((cpad-pressed? 0 down) (true! moved?) (+! (-> orb root trans z) (meters 0.03))) ;; (+! (-> orb base z) (meters 0.03)))
                                ((cpad-pressed? 0 up) (true! moved?) (+! (-> orb root trans z) (meters -0.03))) ;; (+! (-> orb base z) (meters -0.03)))
                                ((cpad-pressed? 0 right) (true! moved?) (+! (-> orb root trans x) (meters 0.03))) ;; (+! (-> orb base x) (meters 0.03)))
                                ((cpad-pressed? 0 left) (true! moved?) (+! (-> orb root trans x) (meters -0.03))) ;; (+! (-> orb base x) (meters -0.03)))
                                ;; Y (up/down)
                                ((cpad-hold? 0 r2) (true! moved?) (+! (-> orb root trans y) (meters 0.08))) ;; (+! (-> orb base y) (meters 0.08)))
                                ((cpad-hold? 0 l2) (true! moved?) (+! (-> orb root trans y) (meters -0.08))) ;; (+! (-> orb base y) (meters -0.08)))
                                ((cpad-pressed? 0 r1) (true! moved?) (+! (-> orb root trans y) (meters 0.03))) ;; (+! (-> orb base y) (meters 0.03)))
                                ((cpad-pressed? 0 l1) (true! moved?) (+! (-> orb root trans y) (meters -0.03))) ;; (+! (-> orb base y) (meters -0.03)))
                                )

                              (when moved?
                                ;; un sleep 
                                (logclear! (-> orb mask) (process-mask sleep))
                                ;; make sure we update extra vectors
                                (cond
                                  ((type-type? (-> orb type) collectable)
                                    (vector-copy! (-> (the collectable orb) base) (-> orb root trans))
                                    (vector-copy! (-> (the collectable orb) old-base) (-> orb root trans))
                                    (vector-copy! (-> (the collectable orb) extra-trans) (-> orb root trans))
                                    )
                                  )
                                ;; force update transforms
                                (when (type-type? (-> orb root type) collide-shape)
                                  (update-transforms! (the collide-shape (-> orb root)))))
                              )
                            )
                          )
                        (else
                          ;; clear these
                          (set! *square-hold-time* (the time-frame #f)) ;; make sure square not considered held
                          (set! *circle-hold-time* (the time-frame #f)) ;; make sure circle not considered held
                          )
                        )
                      )
                    )
                  
                  ;; Processes should suspend themselves, the loop will resume next frame
                  (suspend)))))))))
  (none))

(defun orb-placer-clear! ()
  (dotimes (idx (-> *orb-placer-count* *orb-placer-selected-level-idx*))
    (cond
      ((and (-> *orb-placer-orbs* *orb-placer-selected-level-idx* idx) (nonzero? (-> *orb-placer-orbs* *orb-placer-selected-level-idx* idx)) (handle->process (-> *orb-placer-orbs* *orb-placer-selected-level-idx* idx)))
        (deactivate (handle->process (-> *orb-placer-orbs* *orb-placer-selected-level-idx* idx)))
        (set! (-> *orb-placer-orbs* *orb-placer-selected-level-idx* idx) (the-as handle #f))
        )
      )
    )
  (set! (-> *orb-placer-count* *orb-placer-selected-level-idx*) 0)
  (set! *orb-placer-selected-idx* -1)
  (set! *entity-placer-edit-mode?* #f)
  (none)
  )

;; file save/load stuff

(defun orbs-handle-input-settings ((file file-stream))
  ;; Parses an orb line in the file, expecting the format: (orb-idx x y z bob-scale type spawn-req despawn-req)
  (let* ((orb-idx (string->int *pc-temp-string*))
         (ptype (file-stream-read-symbol file))
         (x (file-stream-read-float file))
         (y (file-stream-read-float file))
         (z (file-stream-read-float file))
         (v (new-stack-vector0))
         (spawn-orb-req (file-stream-read-float file))
         (next-char (file-stream-get-next-char-ret file))
         (despawn-orb-req (if (or (= #x28 next-char) (= #x29 next-char)) 0.0 (file-stream-read-float file))) ;; try to read despawn req, but if its not there just use 0.0
         )
    (set! (-> *orb-placer-count* *orb-placer-selected-level-idx*) (max (-> *orb-placer-count* *orb-placer-selected-level-idx*) (+ orb-idx 1)))
    ;; (dbg-format 0 "load spawn-ventblue from file, total count is now ~D~%" (-> *orb-placer-count* *orb-placer-selected-level-idx*))
    (set-vector-meters! v x y z)
    (let ((orb-handle (spawn-obj ptype v spawn-orb-req despawn-orb-req))) ;; just pass type/amount=1.0 here and we set the type after its spawned
      (when (nonzero? orb-handle)
        (set! (-> *orb-placer-orbs* *orb-placer-selected-level-idx* orb-idx) orb-handle)
        )
      )
    )
  0)

(defun orbs-read-from-file ((filename string))
  (if (not filename)
    (return #f))

  (let ((file (new 'stack 'file-stream filename 'read)))
    (when (not (file-stream-valid? file))
      (return #f))

    (with-settings-scope (file)
      (case-str (file-stream-read-word file)
        (("settings")
          (file-stream-read-int file) ;; burn thru version field
          (dosettings (file)
            (orbs-handle-input-settings file)
            )
          )
        )
      )
    (orb-placer-list-maintenance #t)

    (file-stream-close file)
    )

  ;; (dbg-format 0 "obj-placer file read: ~A~%" filename)

  #t
  )

(defun orbs-handle-output-settings ((file file-stream))
  (dotimes (idx (-> *orb-placer-count* *orb-placer-selected-level-idx*))
    (cond
      ((and (-> *orb-placer-orbs* *orb-placer-selected-level-idx* idx) (nonzero? (-> *orb-placer-orbs* *orb-placer-selected-level-idx* idx)) (handle->process (-> *orb-placer-orbs* *orb-placer-selected-level-idx* idx)))
        (let* ((orb (the process-drawable (handle->process (-> *orb-placer-orbs* *orb-placer-selected-level-idx* idx))))
               (v (-> orb root trans)) ;; (-> orb base))
               (spawn-orb-req (orb-placer-get-spawn-orb-req orb))
               (despawn-orb-req (orb-placer-get-despawn-orb-req orb))
               )
          ;; break across 2 calls because of 8 arg limit lol
          (format file "  (~D ~S ~m ~m ~m" idx (-> orb type symbol) (-> v x) (-> v y) (-> v z))
          (format file " ~F ~F)~%" spawn-orb-req despawn-orb-req)
          )
        )
      (else
        ;; skipped orb?
        (format 0 "found missing obj in idx ~D, skipping~%" idx)
        )
      )
    )

  0)

(defun orbs-write-to-file ((filename string))
  (if (not filename)
    (return #f))

  (let ((file (new 'stack 'file-stream filename 'write)))
    (if (not (file-stream-valid? file))
      (return #f))

    (format file "(settings #x~X~%" PC_KERNEL_VERSION)

    (orbs-handle-output-settings file)

    (format file "  )~%")
    (file-stream-close file)
    )

  (format 0 "obj-placer file write: ~A~%" filename)

  #t
  )

(define *orba-filename* "OBJPLACER-")

(defun orbs-save-to-file ((filenum int))
  (when (nonzero? (-> *orb-placer-count* *orb-placer-selected-level-idx*)) ;; dont accidentally overwrite w empty file
    (format (clear *pc-temp-string-1*) "~S/custom_assets/jak1/objects/~S~S.gc" *pc-jak-project-path* *orba-filename* (-> *orb-placer-lvl-names* filenum))
    (pc-mkdir-file-path *pc-temp-string-1*)
    (orbs-write-to-file *pc-temp-string-1*)
    ;; do it again as backup for josh in settings folder
    (format (clear *pc-temp-string-1*) "~S/~S~S.gc" *pc-settings-folder* *orba-filename* (-> *orb-placer-lvl-names* filenum))
    (pc-mkdir-file-path *pc-temp-string-1*)
    (orbs-write-to-file *pc-temp-string-1*)
    )
  (none))
;; too lazy to do this better
(defun orbs-save-to-file-active () (orbs-save-to-file *orb-placer-selected-level-idx*))
(defun orbs-save-to-file-1 () (orbs-save-to-file 0))
(defun orbs-save-to-file-2 () (orbs-save-to-file 1))
(defun orbs-save-to-file-3 () (orbs-save-to-file 2))
(defun orbs-save-to-file-4 () (orbs-save-to-file 3))
(defun orbs-save-to-file-5 () (orbs-save-to-file 4))
(defun orbs-save-to-file-6 () (orbs-save-to-file 5))
(defun orbs-save-to-file-7 () (orbs-save-to-file 6))
(defun orbs-save-to-file-8 () (orbs-save-to-file 7))
(defun orbs-save-to-file-9 () (orbs-save-to-file 8))
(defun orbs-save-to-file-10 () (orbs-save-to-file 9))
(defun orbs-save-to-file-11 () (orbs-save-to-file 10))
(defun orbs-save-to-file-12 () (orbs-save-to-file 11))
(defun orbs-save-to-file-13 () (orbs-save-to-file 12))
(defun orbs-save-to-file-14 () (orbs-save-to-file 13))
(defun orbs-save-to-file-15 () (orbs-save-to-file 14))
(defun orbs-save-to-file-16 () (orbs-save-to-file 15))

(defun orbs-load ((filenum int))
  (set! *orb-placer-selected-level-idx* filenum)
  (format (clear *pc-temp-string-1*) "~S/custom_assets/jak1/objects/~S~S.gc" *pc-jak-project-path* *orba-filename* (-> *orb-placer-lvl-names* filenum))
  (cond
    ((pc-filepath-exists? *pc-temp-string-1*)
      (format 0 "[PC] Obj Placer Settings found at '~S'...loading!~%" *pc-temp-string-1*)
      (orb-placer-clear!)
      (unless (orbs-read-from-file *pc-temp-string-1*)
        (format 0 "[PC] Obj Placer Settings found at '~S' but could not be loaded!~%" *pc-temp-string-1*)
        )
      )
    (else
      (format 0 "[PC] Obj Placer Settings not found at '~S'~%" *pc-temp-string-1*)
      )
    )
  0)
;; too lazy to do this better
(defun orbs-load-1 () (orbs-load 0))
(defun orbs-load-2 () (orbs-load 1))
(defun orbs-load-3 () (orbs-load 2))
(defun orbs-load-4 () (orbs-load 3))
(defun orbs-load-5 () (orbs-load 4))
(defun orbs-load-6 () (orbs-load 5))
(defun orbs-load-7 () (orbs-load 6))
(defun orbs-load-8 () (orbs-load 7))
(defun orbs-load-9 () (orbs-load 8))
(defun orbs-load-10 () (orbs-load 9))
(defun orbs-load-11 () (orbs-load 10))
(defun orbs-load-12 () (orbs-load 11))
(defun orbs-load-13 () (orbs-load 12))
(defun orbs-load-14 () (orbs-load 13))
(defun orbs-load-15 () (orbs-load 14))
(defun orbs-load-16 () (orbs-load 15))

(defun orbs-set-lvl-closest ()
  (set! *orb-placer-selected-level-idx* (-> *level-task-data-remap* (+ -1 (-> (level-get-target-inside *level*) info index)))) 
  (set! *orb-placer-selected-idx* -1)
  (orb-placer-list-maintenance #t))
(defun orbs-set-lvl-1 () (set! *orb-placer-selected-level-idx* 0)   (set! *orb-placer-selected-idx* -1) (orb-placer-list-maintenance #t))
(defun orbs-set-lvl-2 () (set! *orb-placer-selected-level-idx* 1)   (set! *orb-placer-selected-idx* -1) (orb-placer-list-maintenance #t))
(defun orbs-set-lvl-3 () (set! *orb-placer-selected-level-idx* 2)   (set! *orb-placer-selected-idx* -1) (orb-placer-list-maintenance #t))
(defun orbs-set-lvl-4 () (set! *orb-placer-selected-level-idx* 3)   (set! *orb-placer-selected-idx* -1) (orb-placer-list-maintenance #t))
(defun orbs-set-lvl-5 () (set! *orb-placer-selected-level-idx* 4)   (set! *orb-placer-selected-idx* -1) (orb-placer-list-maintenance #t))
(defun orbs-set-lvl-6 () (set! *orb-placer-selected-level-idx* 5)   (set! *orb-placer-selected-idx* -1) (orb-placer-list-maintenance #t))
(defun orbs-set-lvl-7 () (set! *orb-placer-selected-level-idx* 6)   (set! *orb-placer-selected-idx* -1) (orb-placer-list-maintenance #t))
(defun orbs-set-lvl-8 () (set! *orb-placer-selected-level-idx* 7)   (set! *orb-placer-selected-idx* -1) (orb-placer-list-maintenance #t))
(defun orbs-set-lvl-9 () (set! *orb-placer-selected-level-idx* 8)   (set! *orb-placer-selected-idx* -1) (orb-placer-list-maintenance #t))
(defun orbs-set-lvl-10 () (set! *orb-placer-selected-level-idx* 9)  (set! *orb-placer-selected-idx* -1) (orb-placer-list-maintenance #t))
(defun orbs-set-lvl-11 () (set! *orb-placer-selected-level-idx* 10) (set! *orb-placer-selected-idx* -1) (orb-placer-list-maintenance #t))
(defun orbs-set-lvl-12 () (set! *orb-placer-selected-level-idx* 11) (set! *orb-placer-selected-idx* -1) (orb-placer-list-maintenance #t))
(defun orbs-set-lvl-13 () (set! *orb-placer-selected-level-idx* 12) (set! *orb-placer-selected-idx* -1) (orb-placer-list-maintenance #t))
(defun orbs-set-lvl-14 () (set! *orb-placer-selected-level-idx* 13) (set! *orb-placer-selected-idx* -1) (orb-placer-list-maintenance #t))
(defun orbs-set-lvl-15 () (set! *orb-placer-selected-level-idx* 14) (set! *orb-placer-selected-idx* -1) (orb-placer-list-maintenance #t))
(defun orbs-set-lvl-16 () (set! *orb-placer-selected-level-idx* 15) (set! *orb-placer-selected-idx* -1) (orb-placer-list-maintenance #t))

(defun orb-placer-autoload-clear! ()
  ;; unload objs for any level we dont have loaded
  (dotimes (i 16)
    (when (-> *orb-placer-lvl-loaded?* i) ;; i is loaded
      (set! *orb-placer-selected-level-idx* i)
      (orb-placer-clear!)
      (false! (-> *orb-placer-lvl-loaded?* i))
      )
    )
  (none)
  )

(defun orb-placer-autoload-maintenance ()
  ;; unload objs for any level we dont have loaded
  (dotimes (i 16)
    (when (and (-> *orb-placer-lvl-loaded?* i) ;; i is loaded
                ;; neither level0 nor level1 matches i (and is active)
                (not (or (and (= (-> *level* level0 status) 'active) (= i (-> *level-task-data-remap* (+ -1 (-> *level* level0 info index)))))
                        (and (= (-> *level* level1 status) 'active) (= i (-> *level-task-data-remap* (+ -1 (-> *level* level1 info index)))))
                        ))
                )
      (set! *orb-placer-selected-level-idx* i)
      (orb-placer-clear!)
      (false! (-> *orb-placer-lvl-loaded?* i))
      )
    )
  ;; load objs for either level we dont have loaded
  (when (= (-> *level* level0 status) 'active)
    (let ((idx (-> *level-task-data-remap* (+ -1 (-> *level* level0 info index)))))
      (when (not (-> *orb-placer-lvl-loaded?* idx))
        (orbs-load idx)
        (true! (-> *orb-placer-lvl-loaded?* idx))
        )
      )
    )
  (when (= (-> *level* level1 status) 'active)
    (let ((idx (-> *level-task-data-remap* (+ -1 (-> *level* level1 info index)))))
      (when (not (-> *orb-placer-lvl-loaded?* idx))
        (orbs-load idx)
        (true! (-> *orb-placer-lvl-loaded?* idx))
        )
      )
    )
  (none)
  )